#! /usr/bin/env ruby

require "gettc"
include Gettc

require "rubygems"
require "fileutils"
require "yaml"

def replace_config
  FileUtils.mkdir($config_dir)
  FileUtils.cp_r(File.join($root_dir, "dist/."), $config_dir)
end

def load_config
  replace_config unless Dir.exists?($config_dir)
  config = YAML.load_file(File.join($config_dir, "config.yml"))

  version = config["version"]
  version = Gem::Version.new(version) unless version.nil?

  if version.nil? || version < Gem::Version.new(VERSION)
    FileUtils.rm_rf($config_dir)
    replace_config
  end

  $account = config["account"]
end

def save_config
  File.open(File.join($config_dir, "config.yml"), 'w') { |f|
    f.write({"account" => $account, "version" => Gem::Version.new(VERSION).version}.to_yaml)
  }
end

def init
  $config_dir = ENV.fetch("GETTC_HOME", File.expand_path("~/.gettc"))
  gem_d = Gem.loaded_specs["gettc"]
  $root_dir = gem_d ? gem_d.full_gem_path : File.join(File.dirname(__FILE__), "../")

  load_config
  $downloader = Downloader.new($account)
  $parser = Parser.new($downloader)
  $generator = Generator.new($config_dir, Dir.getwd)
end

def gettc(id)
  problem = $parser.parse(id)
  puts "#{problem.name} was used for #{problem.source}."
  $generator.generate(problem)

  puts "All done. Start solving with:"
  puts "    $ cd #{problem.name}/solve/<your_language>"
  puts "    $ make demo"
rescue TemplateError => err
  puts err
end

def main
  prog = File.basename(__FILE__)
  usage = <<-eos.strip
gettc <id>: Generate a solution for the TopCoder problem with that ID, eg 11138.
gettc version: Print version string.
gettc reset: Bring all settings to default state.
  eos

  if ARGV.empty?
    puts usage
    return
  end

  command = ARGV[0]
  case command
  when "version"
    puts VERSION
  when "reset"
    FileUtils.rm_rf($config_dir)
    replace_config
  else
    gettc(command.to_i)
  end

rescue StandardError => err
  puts err
  exit -1
ensure
  save_config
end

init
main
